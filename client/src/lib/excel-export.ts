import * as XLSX from 'xlsx';
import { ScannedQR } from '@shared/schema';
import zatScanLogo from '@assets/zatscan-color_1750578368450.png';

// Function to convert image to base64
async function getImageAsBase64(imagePath: string): Promise<string> {
  try {
    const response = await fetch(imagePath);
    const blob = await response.blob();
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result as string);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    console.warn('Could not load logo image:', error);
    return '';
  }
}

export interface ExportOptions {
  filename: string;
  includeHeaders: boolean;
  exportRange: 'all' | 'selected' | 'valid';
  selectedIds?: number[];
}

export async function exportToExcel(
  qrCodes: ScannedQR[], 
  options: ExportOptions
): Promise<void> {
  let dataToExport = qrCodes;
  
  // Filter data based on export range
  switch (options.exportRange) {
    case 'selected':
      if (options.selectedIds) {
        dataToExport = qrCodes.filter(qr => options.selectedIds!.includes(qr.id));
      }
      break;
    case 'valid':
      dataToExport = qrCodes.filter(qr => qr.status === 'valid');
      break;
    default:
      // 'all' - use all data
      break;
  }
  
  // Create workbook and worksheet
  const wb = XLSX.utils.book_new();
  const ws = XLSX.utils.aoa_to_sheet([]);
  
  // Get logo as base64 for embedding
  const logoBase64 = await getImageAsBase64(zatScanLogo);
  
  // Add ZatScan header and branding with logo
  const headerRows = [
    ['ZatScan - ZATCA QR Code Scanner', '', '', '', '', '', '', '', '', ''],
    ['Saudi Arabia Invoice QR Code Analysis Report', '', '', '', '', '', '', '', '', ''],
    ['', '', '', '', '', '', '', '', '', ''], // Empty row for logo space
    ['Generated by ZatScan', '', '', '', '', '', '', 'Export Date:', new Date().toLocaleDateString(), ''],
    ['Website: www.growthsphereindustries.com', '', '', '', '', '', '', 'Export Time:', new Date().toLocaleTimeString(), ''],
    ['', '', '', '', '', '', '', '', '', ''], // Empty row for spacing
    ['Report Summary:', '', '', '', '', '', '', '', '', ''],
    ['Total Records:', dataToExport.length.toString(), '', 'Valid Records:', dataToExport.filter(qr => qr.status === 'valid').length.toString(), '', 'Invalid Records:', dataToExport.filter(qr => qr.status !== 'valid').length.toString(), '', ''],
    ['', '', '', '', '', '', '', '', '', ''], // Empty row for spacing
  ];
  
  // Add header rows to worksheet
  XLSX.utils.sheet_add_aoa(ws, headerRows, { origin: 'A1' });
  
  // Add logo information as worksheet metadata
  if (logoBase64) {
    // Add logo as a drawing/image reference
    if (!ws['!drawings']) ws['!drawings'] = [];
    ws['!drawings'].push({
      type: 'image',
      data: logoBase64,
      position: { x: 10, y: 10, width: 200, height: 60 },
      cell: 'A3'
    });
    
    // Also add logo reference in cell comment for compatibility
    if (!ws['!comments']) ws['!comments'] = [];
    ws['!comments'].push({
      ref: 'A3',
      author: 'ZatScan',
      t: 'ZatScan Logo - Professional ZATCA QR Code Scanner'
    });
  }
  
  // Transform data for Excel export
  const excelData = dataToExport.map((qr, index) => ({
    'Row': index + 1,
    'Status': qr.status === 'valid' ? 'Valid' : 'Invalid',
    'Seller Name': qr.sellerName || '-',
    'VAT Number': qr.vatNumber || '-',
    'Invoice Number': qr.invoiceNumber || '-',
    'Invoice Date': qr.invoiceDate || '-',
    'Subtotal (SAR)': qr.subtotal ? parseFloat(qr.subtotal).toFixed(2) : '-',
    'VAT Amount (SAR)': qr.vatAmount ? parseFloat(qr.vatAmount).toFixed(2) : '-',
    'Total Amount (SAR)': qr.totalAmount ? parseFloat(qr.totalAmount).toFixed(2) : '-',
    'Scanned At': qr.scannedAt.toLocaleString(),
  }));
  
  // Add data starting from row 9 (after header)
  if (options.includeHeaders) {
    XLSX.utils.sheet_add_json(ws, excelData, { 
      origin: 'A9',
      header: ['Row', 'Status', 'Seller Name', 'VAT Number', 'Invoice Number', 'Invoice Date', 'Subtotal (SAR)', 'VAT Amount (SAR)', 'Total Amount (SAR)', 'Scanned At']
    });
  } else {
    XLSX.utils.sheet_add_json(ws, excelData, { 
      origin: 'A9',
      skipHeader: true 
    });
  }
  
  // Add summary section
  if (dataToExport.length > 0) {
    const validQRs = dataToExport.filter(qr => qr.status === 'valid');
    const totalAmount = validQRs.reduce((sum, qr) => 
      sum + (qr.totalAmount ? parseFloat(qr.totalAmount) : 0), 0
    );
    const totalVAT = validQRs.reduce((sum, qr) => 
      sum + (qr.vatAmount ? parseFloat(qr.vatAmount) : 0), 0
    );
    const totalSubtotal = totalAmount - totalVAT;
    
    const summaryStartRow = 9 + excelData.length + (options.includeHeaders ? 1 : 0) + 2;
    const summaryData = [
      ['', '', '', '', '', '', '', '', '', ''], // Empty row
      ['FINANCIAL SUMMARY', '', '', '', '', '', '', '', '', ''],
      ['Valid Invoices:', validQRs.length.toString(), '', 'Total Subtotal:', `${totalSubtotal.toFixed(2)} SAR`, '', 'Total VAT:', `${totalVAT.toFixed(2)} SAR`, '', 'Grand Total:', `${totalAmount.toFixed(2)} SAR`],
      ['', '', '', '', '', '', '', '', '', ''], // Empty row
      ['Report generated by ZatScan', '', '', '', '', '', '', 'Page 1 of 1', '', ''],
      ['For support, visit: www.growthsphereindustries.com', '', '', '', '', '', '', '', '', ''],
    ];
    
    XLSX.utils.sheet_add_aoa(ws, summaryData, { origin: `A${summaryStartRow}` });
  }
  
  // Set column widths
  const colWidths = [
    { wch: 8 },   // Row
    { wch: 12 },  // Status
    { wch: 30 },  // Seller Name
    { wch: 20 },  // VAT Number
    { wch: 20 },  // Invoice Number
    { wch: 15 },  // Invoice Date
    { wch: 18 },  // Subtotal
    { wch: 18 },  // VAT Amount
    { wch: 18 },  // Total Amount
    { wch: 22 },  // Scanned At
  ];
  ws['!cols'] = colWidths;
  
  // Style the header cells (bold and colored)
  const headerRange = XLSX.utils.decode_range('A1:J8');
  for (let R = headerRange.s.r; R <= headerRange.e.r; ++R) {
    for (let C = headerRange.s.c; C <= headerRange.e.c; ++C) {
      const cellAddress = XLSX.utils.encode_cell({ r: R, c: C });
      if (!ws[cellAddress]) continue;
      
      // Style header rows differently
      if (R === 0) { // Main title
        ws[cellAddress].s = {
          font: { bold: true, sz: 16, color: { rgb: "FFFFFF" } },
          fill: { bgColor: { indexed: 64 }, fgColor: { rgb: "4472C4" } },
          alignment: { horizontal: "center", vertical: "center" }
        };
      } else if (R === 1) { // Subtitle
        ws[cellAddress].s = {
          font: { bold: true, sz: 12, color: { rgb: "FFFFFF" } },
          fill: { bgColor: { indexed: 64 }, fgColor: { rgb: "70AD47" } },
          alignment: { horizontal: "center", vertical: "center" }
        };
      } else if (R === 2 || R === 3) { // Generated by info
        ws[cellAddress].s = {
          font: { italic: true, sz: 10 },
          alignment: { horizontal: "left", vertical: "center" }
        };
      }
    }
  }
  
  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(wb, ws, 'ZatScan Report');
  
  // Generate filename with ZatScan prefix
  const timestamp = new Date().toISOString().split('T')[0];
  const filename = options.filename || `ZatScan_ZATCA_Report_${timestamp}`;
  const finalFilename = filename.endsWith('.xlsx') ? filename : `${filename}.xlsx`;
  
  // Save file
  XLSX.writeFile(wb, finalFilename);
}
